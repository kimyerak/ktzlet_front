'use client';

import { useState, useRef, useMemo, useEffect } from 'react';
import { quizService, questionService } from '../../services/apiService';

export default function TestCreation({ testConfig, onBack, onSubmit, user }) {
  const [loading, setLoading] = useState(true);
  
  // testConfig가 null일 때 기본값 제공
  const safeTestConfig = testConfig || {
    title: '새 테스트',
    numofquestion: 2,
    time_limit_sec: 3600,
    open_at: '2025-08-01T00:00',
    close_at: '2025-08-31T23:59',
    target_score: 70,
    questions: []
  };
  
  console.log('TestCreation testConfig:', testConfig);
  console.log('TestCreation safeTestConfig:', safeTestConfig);
  console.log('TestCreation safeTestConfig.id:', safeTestConfig.id);
  
  const normalizeQuestion = (q, id) => ({
    id: id || q?.id || Date.now() + Math.random(),
    type: q?.type || 'dictation',
    question: q?.question || '다음 단어를 듣고 스펠링을 쓰세요.',
    correctAnswer: q?.correctAnswer ?? '',
    explanation: q?.explanation || '',
    points: q?.points ?? 1,
    vocabId: q?.vocabId || null,
    vocab: q?.vocab || null,
    options: q?.options || []
  });

  const initialQuestions = useMemo(() => {
    if (!safeTestConfig) return [];
    
    const existing = Array.isArray(safeTestConfig.questions) ? safeTestConfig.questions : [];
    const count = safeTestConfig.numofquestion || 2;
    const arr = Array.from({ length: count }, (_, index) => {
      const existingQ = existing[index];
      return normalizeQuestion(existingQ, index + 1);
    });
    return arr;
  }, [safeTestConfig]);

  const [questions, setQuestions] = useState([]);
  const [savedQuestions, setSavedQuestions] = useState([]);
  const [savingQuestion, setSavingQuestion] = useState(false);

  // safeTestConfig가 변경될 때 questions 업데이트
  useEffect(() => {
    if (!safeTestConfig) return;
    
    if (safeTestConfig.isAutoGenerated && safeTestConfig.autoGeneratedQuestions) {
      console.log('자동 생성 모드: AI가 생성한 문제들 로드');
      
      const autoGeneratedQuestions = safeTestConfig.autoGeneratedQuestions.map((q, index) => {
        let vocabInfo = null;
        if (q.vocabId && safeTestConfig.autoGeneratedVocabs) {
          vocabInfo = safeTestConfig.autoGeneratedVocabs.find(v => v.id === q.vocabId);
        }
        
        const questionData = {
          id: q.id || index + 1,
          type: q.type || 'dictation',
          vocabId: q.vocabId,
          question: q.question || q.stem || '',
          correctAnswer: q.correctAnswer || '',
          explanation: q.explanation || '',
          points: q.points || 1,
          vocab: vocabInfo || q.vocab || null,
          options: q.options || []
        };
        
        return questionData;
      });
      
      setQuestions(autoGeneratedQuestions);
      setSavedQuestions(autoGeneratedQuestions);
      setLoading(false);
    }
    else if (safeTestConfig.questions && Array.isArray(safeTestConfig.questions) && safeTestConfig.questions.length > 0) {
      console.log('기존 문제들 로드:', safeTestConfig.questions);
      
      const existingQuestions = safeTestConfig.questions.map((q, index) => {
        let vocabInfo = null;
        if (q.vocabId && safeTestConfig.selectedVocabs) {
          vocabInfo = safeTestConfig.selectedVocabs.find(v => v.id === q.vocabId);
        }
        
        const questionData = {
          id: q.id || index + 1,
          type: q.type || 'dictation',
          vocabId: q.vocabId,
          question: q.question || q.stem || '',
          correctAnswer: q.correctAnswer || '',
          explanation: q.explanation || '',
          points: q.points || 1,
          vocab: vocabInfo || q.vocab || null,
          options: q.options || []
        };
        
        return questionData;
      });
      
      setQuestions(existingQuestions);
      setSavedQuestions(existingQuestions);
      setLoading(false);
    } else {
      console.log('새 문제들 생성:', initialQuestions);
      setQuestions(initialQuestions);
      setLoading(false);
    }
  }, [safeTestConfig, initialQuestions]);

  const [currentQuestion, setCurrentQuestion] = useState(0);
  
  useEffect(() => {
    if (questions.length > 0 && currentQuestion >= questions.length) {
      setCurrentQuestion(0);
    }
  }, [questions.length, currentQuestion]);

  const areAllQuestionsComplete = () => {
    if (questions.length === 0) return false;
    
    return questions.every(question => 
      question && 
      question.question && 
      question.question.trim() && 
      question.vocabId &&
      question.correctAnswer !== undefined && 
      question.correctAnswer !== null && 
      question.correctAnswer !== ''
    );
  };

  const handleExitAttempt = async () => {
    const completedQuestions = questions.filter(q => 
      q && q.question && q.question.trim() && q.vocabId && q.correctAnswer !== undefined && q.correctAnswer !== null && q.correctAnswer !== ''
    );
    
    if (completedQuestions.length < questions.length) {
      const incompleteCount = questions.length - completedQuestions.length;
      const confirmExit = confirm(
        `아직 ${incompleteCount}개의 질문이 모두 작성되지 않았어요!\n\n그래도 나가시겠어요? 그러면 저장되지 않습니다!`
      );
      
      if (confirmExit) {
        if (safeTestConfig.id) {
          try {
            console.log('미완성 퀴즈 삭제 시작:', safeTestConfig.id);
            await quizService.deleteQuiz(safeTestConfig.id);
            console.log('미완성 퀴즈 삭제 완료');
          } catch (error) {
            console.error('퀴즈 삭제 오류:', error);
          }
        }
        onBack();
      }
    } else {
      onBack();
    }
  };

  const questionRefs = useRef([]);

  const updateQuestion = (index, field, value) => {
    setQuestions(prev => {
      const updated = prev.map((q, i) => {
        if (i === index) {
          const newQuestion = { ...q, [field]: value };
          
          if (field === 'vocabId') {
            const vocab = safeTestConfig.selectedVocabs && safeTestConfig.selectedVocabs.find(v => v.id === value);
            if (vocab) {
              newQuestion.vocab = vocab;
              // 받아쓰기 문제이고 정답이 비어있으면 자동으로 정답 설정
              if (newQuestion.type === 'dictation' && (!newQuestion.correctAnswer || newQuestion.correctAnswer === '')) {
                newQuestion.correctAnswer = vocab.word;
              }
            }
          }
          
          if (field === 'type' && value !== q.type) {
            const vocab = safeTestConfig.selectedVocabs && safeTestConfig.selectedVocabs.find(v => v.id === newQuestion.vocabId);
            if (vocab) {
              switch (value) {
                case 'dictation':
                  newQuestion.question = `다음 단어를 듣고 스펠링을 쓰세요.`;
                  newQuestion.correctAnswer = vocab.word;
                  newQuestion.explanation = `${vocab.word}는 ${vocab.definition}입니다.`;
                  break;
                  
                case 'ox':
                  const isCorrect = Math.random() > 0.5;
                  
                  if (isCorrect) {
                    newQuestion.question = `${vocab.word} : ${vocab.definition}`;
                    newQuestion.correctAnswer = 1;
                  } else {
                    const otherVocabs = safeTestConfig.selectedVocabs.filter(v => v.id !== vocab.id);
                    if (otherVocabs.length > 0) {
                      const randomVocab = otherVocabs[Math.floor(Math.random() * otherVocabs.length)];
                      newQuestion.question = `${vocab.word} : ${randomVocab.definition}`;
                      newQuestion.correctAnswer = 0;
                    } else {
                      newQuestion.question = `${vocab.word} : 잘못된 뜻`;
                      newQuestion.correctAnswer = 0;
                    }
                  }
                  newQuestion.explanation = `${vocab.word}는 ${vocab.definition}입니다.`;
                  break;
                  
                case 'multiple':
                  const otherVocabs = questions.filter(q => q.vocab && q.vocab.id !== vocab.id);
                  const shuffledVocabs = [...otherVocabs].sort(() => Math.random() - 0.5);
                  const options = [
                    vocab.word,
                    ...shuffledVocabs.slice(0, 3).map(q => q.vocab.word)
                  ].sort(() => Math.random() - 0.5);
                  
                  const correctIndex = options.indexOf(vocab.word);
                  
                  newQuestion.question = `${vocab.definition} - 이 뜻을 가진 단어는?`;
                  newQuestion.correctAnswer = correctIndex;
                  newQuestion.options = options;
                  newQuestion.explanation = `${vocab.definition}는 ${vocab.word}입니다.`;
                  break;
              }
            }
          }
          
          return newQuestion;
        }
        return q;
      });
      return updated;
    });
  };

  const saveCurrentQuestion = async () => {
    const currentQ = questions[currentQuestion];
    if (!currentQ || !currentQ.question || !currentQ.question.trim()) {
      alert('문제 내용을 입력해주세요!');
      return;
    }
    
    if (!currentQ.vocabId) {
      alert('문제와 관련된 단어장을 선택해주세요!');
      return;
    }

    setSavingQuestion(true);
    try {
      setSavedQuestions(prev => {
        const updated = [...prev];
        updated[currentQuestion] = { ...currentQ, saved: true };
        return updated;
      });

      if (currentQuestion < questions.length - 1) {
        setCurrentQuestion(currentQuestion + 1);
      }
      
      console.log(`문제 ${currentQuestion + 1} 저장 완료:`, currentQ);
      alert('✅ 문제가 저장되었습니다!');
    } catch (error) {
      console.error('문제 저장 오류:', error);
      alert('문제 저장에 실패했습니다. 다시 시도해주세요.');
    } finally {
      setSavingQuestion(false);
    }
  };

  const isAllQuestionsSaved = () => {
    console.log('=== 저장 상태 확인 ===');
    console.log('questions:', questions);
    console.log('savedQuestions:', savedQuestions);
    console.log('questions.length:', questions.length);
    console.log('savedQuestions.length:', savedQuestions.length);
    
    for (let i = 0; i < questions.length; i++) {
      const question = questions[i];
      const savedQuestion = savedQuestions[i];
      
      const questionContent = question?.question || question?.stem || '';
      const savedQuestionContent = savedQuestion?.question || savedQuestion?.stem || '';
      
      console.log(`문제 ${i + 1}:`, {
        hasQuestion: !!question,
        hasContent: questionContent && questionContent.trim(),
        isSaved: savedQuestion && savedQuestion.saved,
        questionContent: questionContent,
        savedQuestionContent: savedQuestionContent,
        questionType: question?.type,
        vocabId: question?.vocabId
      });
      
      if (!question || !questionContent || !questionContent.trim()) {
        console.log(`문제 ${i + 1} 실패: 내용 없음`);
        return false;
      }
      
      if (!question.vocabId) {
        console.log(`문제 ${i + 1} 실패: vocabId 없음`);
        return false;
      }
      
      if (!savedQuestion || !savedQuestion.saved) {
        console.log(`문제 ${i + 1} 실패: 저장되지 않음`);
        return false;
      }
    }
    
    console.log('모든 문제 저장됨!');
    return questions.length > 0;
  };

  const updateOption = (questionIndex, optionIndex, value) => {
    setQuestions(prev => prev.map((q, i) => 
      i === questionIndex 
        ? { ...q, options: q.options.map((opt, oi) => oi === optionIndex ? value : opt) }
        : q
    ));
  };

  const scrollToQuestion = (index) => {
    questionRefs.current[index]?.scrollIntoView({ 
      behavior: 'smooth',
      block: 'start'
    });
    setCurrentQuestion(index);
  };

  const handleSubmit = async () => {
    if (!isAllQuestionsSaved()) {
      alert('모든 문제를 저장해주세요! 저장되지 않은 문제가 있습니다.');
      return;
    }
    
    const finalQuestions = savedQuestions.filter(q => q && q.saved);
    
    if (finalQuestions.length === 0) {
      alert('저장된 문제가 없습니다. 문제를 작성하고 저장해주세요.');
      return;
    }
    
    const invalidQuestions = finalQuestions.filter(q => {
      const questionContent = q?.question || q?.stem || '';
      return !q || !questionContent || !questionContent.trim() || 
        (q.type === 'multiple' && q.options && q.options.some(opt => !opt.trim()));
    });

    if (invalidQuestions.length > 0) {
      alert(`${invalidQuestions.length}개의 문제가 완성되지 않았습니다. 모든 문제를 완성해주세요! 📝`);
      return;
    }

    try {
      const quizData = {
        title: safeTestConfig.title,
        numOfQuestions: safeTestConfig.numofquestion,
        timeLimitSec: safeTestConfig.time_limit_sec,
        openAt: safeTestConfig.open_at,
        closeAt: safeTestConfig.close_at,
        targetScore: safeTestConfig.target_score,
        createdBy: user.id
      };

      console.log('퀴즈 생성 시작:', quizData);
      const createdQuiz = await quizService.createQuiz(quizData);
      console.log('퀴즈 생성 완료:', createdQuiz);

      const questionsWithQuizId = finalQuestions.map(q => ({
        ...q,
        quizId: createdQuiz.id
      }));

      for (const question of questionsWithQuizId) {
        const questionData = {
          quizId: question.quizId,
          type: question.type === 'dictation' ? 'DICTATION' : 
                question.type === 'ox' ? 'OX' : 
                question.type === 'multiple' ? 'MULTIPLE' : 'DICTATION',
          stem: question.question || question.stem || '',
          correctAnswer: question.type === 'multiple' ? 
            (question.correctAnswer ? parseInt(question.correctAnswer) : 0) : 
            question.correctAnswer,
          explanation: question.explanation || '',
          points: question.points || 1,
          vocabId: question.vocabId,
          options: question.type === 'multiple' ? (question.options && question.options.length > 0 ? question.options : []) : null
        };

        console.log(`문제 ${question.id} 생성 데이터:`, questionData);
        
        if (question.type === 'multiple' && (!question.options || question.options.length === 0)) {
          console.warn(`⚠️ 4지선다 문제 ${question.id}에 options가 없습니다!`);
        }
        
        if (question.type === 'dictation' && (!question.correctAnswer || question.correctAnswer === '')) {
          console.warn(`⚠️ 받아쓰기 문제 ${question.id}에 correctAnswer가 없습니다!`);
        }
        
        const createdQuestion = await questionService.createQuestion(questionData);
        console.log(`문제 ${question.id} 생성 완료:`, createdQuestion);
      }

      const testData = {
        ...safeTestConfig,
        id: createdQuiz.id,
        questions: finalQuestions,
        createdAt: createdQuiz.createdAt || new Date().toISOString()
      };

      console.log('최종 퀴즈 데이터:', testData);
      
      if (confirm('퀴즈를 완성하시겠습니까?')) {
        onSubmit(testData);
      }
    } catch (error) {
      console.error('퀴즈 생성 오류:', error);
      alert('퀴즈 생성 중 오류가 발생했습니다. 다시 시도해주세요.');
    }
  };

  const renderQuestionEditor = (question, index) => {
    if (!question) return null;
    
    const questionId = question.id || index + 1;
    
    return (
      <div
        key={questionId}
        ref={el => questionRefs.current[index] = el}
        className="bg-white rounded-2xl p-6 shadow-lg border border-gray-200 mb-6"
      >
        {/* 문제 헤더 - 간단하게 */}
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-xl font-bold text-gray-900">
            문제 {questionId}번
          </h3>
          <div className="flex items-center space-x-3">
            {/* 간단한 문제 유형 선택 */}
            <div className="flex bg-gray-100 rounded-lg p-1">
              {[
                { value: 'dictation', label: '받아쓰기', icon: '✍️' },
                { value: 'ox', label: 'OX', icon: '⭕❌' },
                { value: 'multiple', label: '4지선다', icon: '📝' }
              ].map((type) => (
                <button
                  key={type.value}
                  onClick={() => updateQuestion(index, 'type', type.value)}
                  className={`px-3 py-1 rounded-md text-sm font-medium transition-all ${
                    question.type === type.value
                      ? 'bg-white text-blue-600 shadow-sm'
                      : 'text-gray-600 hover:text-gray-800'
                  }`}
                >
                  {type.icon} {type.label}
                </button>
              ))}
            </div>
            
            {/* 배점 */}
            <div className="flex items-center space-x-2">
              <span className="text-sm text-gray-700">배점:</span>
              <input
                type="number"
                min="1"
                max="10"
                value={question.points}
                onChange={(e) => updateQuestion(index, 'points', parseInt(e.target.value))}
                className="w-12 px-2 py-1 rounded border border-gray-300 focus:border-blue-500 outline-none text-center text-sm"
              />
              <span className="text-sm text-gray-700">점</span>
            </div>
          </div>
        </div>

        {/* 단어 선택 */}
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-800 mb-2">
            📚 단어 선택 <span className="text-red-500">*</span>
          </label>
          <select
            value={question.vocabId || ''}
            onChange={(e) => updateQuestion(index, 'vocabId', e.target.value ? parseInt(e.target.value) : null)}
            className="w-full px-3 py-2 rounded-lg border border-gray-300 focus:border-blue-500 outline-none text-sm text-gray-800"
            required
          >
            <option value="" className="text-gray-800">단어를 선택하세요</option>
            {safeTestConfig.selectedVocabs && safeTestConfig.selectedVocabs.map((vocab) => (
              <option key={vocab.id} value={vocab.id} className="text-gray-800">
                {vocab.word} - {vocab.definition}
              </option>
            ))}
          </select>
        </div>

        {/* 문제 내용 */}
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-800 mb-2">
            ❓ 문제
            {question.type === 'dictation' && question.correctAnswer && (
              <button
                type="button"
                onClick={() => {
                  if ('speechSynthesis' in window) {
                    const utterance = new SpeechSynthesisUtterance(question.correctAnswer);
                    utterance.lang = 'en-US';
                    utterance.rate = 0.8;
                    speechSynthesis.speak(utterance);
                  }
                }}
                className="ml-2 px-2 py-1 bg-blue-500 hover:bg-blue-600 text-white rounded text-xs transition-colors"
              >
                🔊 듣기
              </button>
            )}
          </label>
          <textarea
            value={question.question}
            onChange={(e) => updateQuestion(index, 'question', e.target.value)}
            placeholder="문제를 입력하세요..."
            className="w-full px-3 py-2 rounded-lg border border-gray-300 focus:border-blue-500 outline-none resize-none text-sm text-gray-800"
            rows={2}
          />
        </div>

        {/* OX 문제 정답 선택 */}
        {question.type === 'ox' && (
          <div className="mb-4">
                      <label className="block text-sm font-medium text-gray-800 mb-2">
            정답 선택
          </label>
            <div className="flex space-x-3">
              <button
                type="button"
                onClick={() => updateQuestion(index, 'correctAnswer', 1)}
                className={`px-4 py-2 rounded-lg border-2 font-medium text-sm transition-all ${
                  question.correctAnswer === 1
                    ? 'bg-green-500 border-green-500 text-white'
                    : 'border-gray-300 hover:border-green-400'
                }`}
              >
                ⭕ 맞음 (O)
              </button>
              <button
                type="button"
                onClick={() => updateQuestion(index, 'correctAnswer', 0)}
                className={`px-4 py-2 rounded-lg border-2 font-medium text-sm transition-all ${
                  question.correctAnswer === 0
                    ? 'bg-red-500 border-red-500 text-white'
                    : 'border-gray-300 hover:border-red-400'
                }`}
              >
                ❌ 틀림 (X)
              </button>
            </div>
          </div>
        )}

        {/* 4지선다 선지 */}
        {question.type === 'multiple' && (
          <div className="mb-4">
                      <label className="block text-sm font-medium text-gray-800 mb-2">
            4지선다 선지
          </label>
            <div className="space-y-2">
              {['A', 'B', 'C', 'D'].map((option, optionIndex) => (
                <div key={optionIndex} className="flex items-center space-x-2">
                  <span className="w-6 h-6 bg-blue-500 text-white rounded flex items-center justify-center text-xs font-bold">
                    {option}
                  </span>
                  <input
                    type="text"
                    value={question.options?.[optionIndex] || ''}
                    onChange={(e) => {
                      const newOptions = [...(question.options || ['', '', '', ''])];
                      newOptions[optionIndex] = e.target.value;
                      updateQuestion(index, 'options', newOptions);
                    }}
                    placeholder={`선지 ${option} 입력...`}
                    className="flex-1 px-3 py-2 rounded border border-gray-300 focus:border-blue-500 outline-none text-sm text-gray-800"
                  />
                  <button
                    type="button"
                    onClick={() => updateQuestion(index, 'correctAnswer', optionIndex)}
                    className={`px-3 py-1 rounded border text-xs font-medium transition-all ${
                      question.correctAnswer === optionIndex
                        ? 'bg-green-500 border-green-500 text-white'
                        : 'border-gray-300 hover:border-green-400'
                    }`}
                  >
                    정답
                  </button>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* 받아쓰기 정답 */}
        {question.type === 'dictation' && (
          <div className="mb-4">
                      <label className="block text-sm font-medium text-gray-800 mb-2">
            정답 (영단어)
          </label>
            <input
              type="text"
              value={question.correctAnswer || ''}
              onChange={(e) => updateQuestion(index, 'correctAnswer', e.target.value)}
              placeholder="정답 영단어를 입력하세요..."
              className="w-full px-3 py-2 rounded-lg border border-gray-300 focus:border-blue-500 outline-none text-sm text-gray-800"
            />
          </div>
        )}

        {/* 해설 */}
        <div>
          <label className="block text-sm font-medium text-gray-800 mb-2">
            💡 해설 (선택사항)
          </label>
          <textarea
            value={question.explanation}
            onChange={(e) => updateQuestion(index, 'explanation', e.target.value)}
            placeholder="문제 해설을 입력하세요..."
            className="w-full px-3 py-2 rounded-lg border border-gray-300 focus:border-blue-500 outline-none resize-none text-sm text-gray-800"
            rows={2}
          />
        </div>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* 메인 컨텐츠 */}
      <div className="max-w-3xl mx-auto p-4">
        <div className="pt-4">


          {/* 현재 문제만 표시 */}
          {questions.length > 0 && questions[currentQuestion] ? (
            renderQuestionEditor(questions[currentQuestion], currentQuestion)
          ) : (
            <div className="bg-white rounded-2xl p-6 shadow-sm border border-gray-200">
              <div className="text-center">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto mb-2"></div>
                <p className="text-gray-700 text-sm">문제를 로딩 중입니다...</p>
              </div>
            </div>
          )}
          
          {/* 간단한 하단 네비게이션 */}
          <div className="flex justify-between items-center mt-6">
            <button
              onClick={() => setCurrentQuestion(Math.max(0, currentQuestion - 1))}
              disabled={currentQuestion === 0}
              className={`px-4 py-2 rounded-lg transition-colors text-sm ${
                currentQuestion === 0
                  ? 'bg-gray-200 text-gray-400 cursor-not-allowed'
                  : 'bg-blue-500 hover:bg-blue-600 text-white'
              }`}
            >
              ← 이전
            </button>
            
            {/* 문제 번호 버튼들 */}
            <div className="flex space-x-1">
              {questions.map((question, index) => (
                <button
                  key={index}
                  onClick={() => setCurrentQuestion(index)}
                  className={`w-8 h-8 rounded-full text-xs font-medium transition-all ${
                    currentQuestion === index
                      ? 'bg-blue-500 text-white'
                      : savedQuestions[index]?.saved
                      ? 'bg-green-500 text-white'
                      : question && question.question && question.question.trim() && question.vocabId
                      ? 'bg-yellow-400 text-yellow-800'
                      : 'bg-gray-200 text-gray-500'
                  }`}
                >
                  {index + 1}
                </button>
              ))}
            </div>
            
            <div className="flex space-x-2">
              {currentQuestion < questions.length - 1 ? (
                <button
                  onClick={saveCurrentQuestion}
                  disabled={savingQuestion || !questions[currentQuestion]?.question?.trim() || !questions[currentQuestion]?.vocabId}
                  className={`px-4 py-2 rounded-lg transition-colors text-sm ${
                    savingQuestion || !questions[currentQuestion]?.question?.trim() || !questions[currentQuestion]?.vocabId
                      ? 'bg-gray-200 text-gray-400 cursor-not-allowed'
                      : 'bg-green-500 hover:bg-green-600 text-white'
                  }`}
                >
                  {savingQuestion ? '저장 중...' : '저장 후 다음 →'}
                </button>
              ) : (
                <button
                  onClick={saveCurrentQuestion}
                  disabled={savingQuestion || !questions[currentQuestion]?.question?.trim() || !questions[currentQuestion]?.vocabId}
                  className={`px-4 py-2 rounded-lg transition-colors text-sm ${
                    savingQuestion || !questions[currentQuestion]?.question?.trim() || !questions[currentQuestion]?.vocabId
                      ? 'bg-gray-200 text-gray-400 cursor-not-allowed'
                      : 'bg-green-500 hover:bg-green-600 text-white'
                  }`}
                >
                  {savingQuestion ? '저장 중...' : '마지막 저장'}
                </button>
              )}
              
              <button
                onClick={() => setCurrentQuestion(Math.min(questions.length - 1, currentQuestion + 1))}
                disabled={currentQuestion === questions.length - 1}
                className={`px-4 py-2 rounded-lg transition-colors text-sm ${
                  currentQuestion === questions.length - 1
                    ? 'bg-gray-200 text-gray-400 cursor-not-allowed'
                    : 'bg-blue-500 hover:bg-blue-600 text-white'
                }`}
              >
                다음 →
              </button>
              
              <button
                onClick={handleSubmit}
                disabled={!isAllQuestionsSaved()}
                className={`px-4 py-2 rounded-lg transition-colors text-sm ${
                  isAllQuestionsSaved()
                    ? 'bg-gradient-to-r from-green-500 to-blue-600 text-white'
                    : 'bg-gray-200 text-gray-400 cursor-not-allowed'
                }`}
              >
                🎯 완성
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
